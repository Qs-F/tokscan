---
筆者: 竹内 史
学籍番号: 22M30190
---

# 特定のカラートークンの使用箇所を提示するソフトウェアに関する仕様書

注: この仕様書は完成していない

## 目次

1. 概要
2. シナリオ
3. 仕様
   1. 背景: カラートークンの設計
   2. 開発するソフトウェアの仕様
4. 見積工数

## 概要

デザイナーとエンジニアの間でカラートークンの使用箇所についての認識の齟齬が発生するという問題がある。これは発生すると認知するのが難しく、修正にも時間がかかるという問題がある上にデザインの信頼性を落とす原因につながる。この問題を解決すべく、任意のカラートークンの使用箇所を提示するソフトウェアを作成し、デザイナーへの確認作業段階での問題の発覚を目指す。

## シナリオ

開発中のUIライブラリに、デザイナーとエンジニア間の連携不足による乖離が発生しつつある。UIデザインはFigma [3] で作成されていて、実装はTailwindCSS [2] で独自設計されたカラートークンを設定して行われている。デザイナーがFigmaでButtonに指定した色がカラートークンで表現された色名「bg-primary-dark-default」であったが、エンジニアは誤って似た色が設定されている色名「bg-shade-dark-default」を使ってしまった。デザイナー側で確認作業が入るがソースコードまでは確認されないため、色が似ていて気がつかずリリースされてしまい、実際に修正されたのは問題発覚から1ヶ月後のことであった。このとき、確認作業段階で少なくともどのコンポーネントでどの色が使われているかがわかれば解決に結びつけやすかった。Figmaにはそのようなプラグインがある [1] が、開発側には簡単に調べられる機能が存在していないため乖離の解決が難航している。

## 仕様

### 背景: カラートークンの設計

カラートークンとは色に名前をつけた変数のようなものである。設定する利点として、例えばエラーメッセージに使う赤色を #FF0000 から #EE0000 に変更したいとなったときも、この変数の中身を変更すればエラーメッセージの色を使っている箇所全てを一気に変更できる事が挙げられる。
このカラートークンの設計は会社等により様々であるが、今回は4つの値から指定される仕組みを採用している。文字列で対象のコンポーネントに指定される仕組みで、[usage]-[intention]-[level]-[state]で1つの値となる。それぞれ[usgae]はtext, bg, border, fillの4種類のうちどれか1つ、[intention]はshade, primary, secondary, positive, negative, notice, informativeの7種類のうちどれか1つ、[level]はdark, medium, light, whiteの4つのうちどれか1つ、[state]はdefault, hover, active, disabledの4つのうちどれか1つをとる。例をあげるとtext-shade-medium-activeは正しいカラートークンであり、bg-shade-active-mediumn (指定する値の順番が不正) やobject-primary-dark-hover (不正なusageの値が入っている) は誤ったカラートークンである。

### 開発するソフトウェアの仕様

本ソフトウェアはGo言語を使用し、コマンドラインアプリケーションとして作成する。本ソフトウェアはデザイナーが簡単に確認できるようStorybook [4] で組み込み表示することを予定しているため (接続部分は本仕様の範囲外である) CIで実行し必要な情報をJSONフォーマットで標準出力へ出力する機能を有する。

外部から与えられる入力は2つである。

- 調査対象のルートディレクトリパス (0個または1個以上の指定のみ可能。複数指定の場合はそれぞれのディレクトリまたはファイルについて表示し、それ以外については無視する。指定のない場合はカレントディレクトリを使用する。globstarに対応する。)
- 調査対象のカラートークン (0個または1個以上の指定のみ可能。複数指定の場合はそれぞれのカラートークンについて表示し、その他のカラートークンは無視する。指定のない場合はすべてのカラートークンについて表示する。)

これらの入力はコマンド実行時の引数で与えられるものとし、ディレクトリルートパスは-dオプションで、カラートークンオプションは-tオプションで与えるものとする。なおカラートークンは複数の指定が可能であるため、これらは1つ以上の連続したスペース (U+0020) で区切られた形式で与えられるものとする。-で始まる入力はオプションの始まりとして区切ってしまって良い。-dと-t以外のオプションが指定されている場合は無視する。

ルートディレクトリパスオプションについて、存在しないディレクトリが指定されているときは(複数個のうち1つでも)エラーとしてその旨を表示する。ディレクトリが指定されている場合はその下に存在するディレクトリとファイルについて再帰的に調査する。ファイルの場合は対象のファイルの中身を調査する。同じファイルについての調査はまとめて出力する。

カラートークンオプションについて、不正なカラートークンが設定されているときは (複数個のうち1つでも) エラーとしてその旨を表示する。

調査方法は、対象となるファイルの中を該当するカラートークンの文字列で検索する。TailwindCSSの仕様として実行時の文字列結合については考慮する必要がないため、使用箇所では必ず完全な形でのカラートークンの文字列が指定されているためである。

出力としては標準出力に次のような形式でJSONフォーマットで出力する。

{
  "[filepath]": [
    "[colorToken]",
    ...
  ],
  ...
}

すなわち、ファイルパスをkeyとしたオブジェクトで、カラートークン名が配列で値に設定されているJSONである。同じ名前のkeyはJSONでは不正であるため同一のファイルについては出力をまとめる。keyの順序は特に指定しない。カラートークンの配列については辞書順でソートする。
ファイルパスが存在しないものに関しては (例えば空のディレクトリを与えられた場合など) は対象のファイルパスについては省略する。またカラートークンが1つも存在しない場合は値を空配列とする。

非機能要件として、多くのファイルを指定される可能性を鑑みてすべてのファイルの中身を一気にメモリには収めてから検索しないことを要求する。

## 見積工数

開発にかかる見積もり時間は、Go言語は標準ライブラリではglobstarに対応していないため外部ライブラリを使用する必要がある。その調査が3時間ほどであると見積もる。その他については制約のあるファイル探索なので5時間ほどと見積もり、合計8時間ほどで完成すると見積もる。
コードサイズはオプションの解析が10行ほど、カラートークンの指定が20行ほど、探索が120行ほど、JSONへの書き出しが10行ほどで合計160行ほどと見積もる。
難易度はファイル探索なので難易度は低いと見積もる。

## 参考文献

[1] https://www.figma.com/community/plugin/1094509452374115777
[2] https://tailwindcss.com/
[3] https://figma.com
